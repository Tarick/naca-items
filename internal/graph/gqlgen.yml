# .gqlgen.yml example
#
# Refer to https://gqlgen.com/config/
# for detailed .gqlgen.yml documentation.

schema: "schema.graphql"

# Where should the generated server code go?
exec:
  filename: generated/generated.go
  package: generated

# Where should any generated models go?
model:
  # Workaround to skip error "no matching versions for query latest"
  # filename: ""
  filename: model/model_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: resolver
  package: resolver

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/Tarick/naca-items/internal/entity"
  - "github.com/Tarick/naca-items/internal/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
# models:
#   ID:
#     model:
#       - github.com/99designs/gqlgen/graphql.ID
#       - github.com/99designs/gqlgen/graphql.Int64
#       - github.com/99designs/gqlgen/graphql.IntID

# models:
#   ItemsConnection:
#     model: 
#       - github.com/Tarick/naca-items/internal/graph/model.ItemsConnection
#   ItemsEdge:
#     model: 
#       - github.com/Tarick/naca-items/internal/graph/model.ItemsEdge
#   PageInfo:
#     model: 
#       - github.com/Tarick/naca-items/internal/graph/model.PageInfo